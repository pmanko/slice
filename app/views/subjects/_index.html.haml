- content_for :header do
  .float-right
    - if @project.site_or_project_editor?(current_user)
      = link_to plus_or("New Subject"), new_project_subject_path(@project), class: "btn btn-accent btn-shadow"
  = @title
- content_for :breadcrumbs do
  = render "layouts/per_page_breadcrumbs", per_page: 20, object_count: @subjects.total_count
  %ol
    %li.breadcrumb-muted subjects
    %li
      = link_to icon("fas", "search"), "#", data: { object: "toggle-search-container", target: "#search" }

.search-container-relative
  .search-container{ class: params[:search].present? ? "search-container-visible" : nil }
    - url = project_subjects_path(@project)
    = form_with url: url, method: :get, local: true, id: "search-form" do |form|
      = form.hidden_field :order, value: params[:order] if params[:order].present?
      = form.hidden_field :site_id, value: params[:site_id] if params[:site_id].present?
      .input-group
        = form.text_field :search, value: params[:search], autocomplete: "off", autocorrect: "off", autocapitalize: "none", spellcheck: "false", data: { object: "subjects-autocomplete", project_id: @project.to_param }, class: "form-control", placeholder: "Search #{@title}", id: "search"
        .input-group-append
          = link_to "#", class: "btn btn-primary", data: { object: "submit-and-disable", target: "#search-form" } do
            = icon("fas", "search")
          - if params[:search].present?
            = link_to url, class: "btn btn-light" do
              &times;
          - else
            = link_to "#", data: { object: "toggle-search-container", target: "#search" }, class: "btn btn-light" do
              &times;

- if @subjects.present?
  - viewable_sites = current_user.all_viewable_sites.where(project_id: @project.id).order_number_and_name.to_a
  - unblinded_user = @project.unblinded?(current_user)
  .dashboard-container.dashboard-table
    %table.table.table-striped.table-borderless.table-hover.table-sticky
      %col
      - if viewable_sites.count > 1
        %col.d-none.d-md-table-column
      %col
      - if @project.randomizations_enabled? && unblinded_user
        %col.d-none.d-sm-table-column
      - if @project.adverse_events_enabled? && unblinded_user
        %col.d-none.d-sm-table-column
      %thead
        %tr
          - filtered_params = params.permit(:site_id, :search)
          = th_sort_field @order, "subjects.subject_code", "Subject", permit: [:site_id]
          - if viewable_sites.count > 1
            %th.d-none.d-md-table-cell.nowrap{ class: ["subjects.site_id", "subjects.site_id desc"].include?(params[:order]) ? "sort-selected" : nil }
              = link_to "Site", project_subjects_path(@project, filtered_params.merge(order: (params[:order] == "subjects.site_id desc" ? "subjects.site_id" : "subjects.site_id desc")))
              %span.dropleft
                = link_to "#", data: { toggle: "dropdown" } do
                  = icon("fas", "filter")
                .dropdown-menu
                  = link_to "All Sites", project_subjects_path(@project, filtered_params.merge(order: params[:order], site_id: nil)), style: params[:site_id].blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                  - viewable_sites.each do |site|
                    = link_to site.number_and_short_name, project_subjects_path(@project, filtered_params.merge(order: params[:order], site_id: site.id)), style: params[:site_id].to_s == site.id.to_s ? "font-weight:bold;" : "", class: "dropdown-item"
          %th.nowrap Recent Activity
          - if @project.randomizations_enabled? && unblinded_user
            %th.d-none.d-sm-table-cell.text-center
              Randomized
              %span.dropleft
                = link_to "#", data: { toggle: "dropdown" } do
                  = icon("fas", "filter")
                .dropdown-menu
                  = link_to "All", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: @tokens.reject { |t| t.key == "randomized" }.collect(&:to_s).join(" "))), style: @tokens.select { |t| t.key == "randomized" }.blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                  = link_to "Randomized", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == "randomized" }.collect(&:to_s) + ["is:randomized"]).join(" "))), style: @tokens.select { |t| t.key == "randomized" && t.operator == "=" }.present? ? "font-weight:bold;" : "", class: "dropdown-item"
                  = link_to "Unrandomized", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == "randomized" }.collect(&:to_s) + ["not:randomized"]).join(" "))), style: @tokens.select { |t| t.key == "randomized" && t.operator == "!=" }.present? ? "font-weight:bold;" : "", class: "dropdown-item"
          - if @project.adverse_events_enabled? && unblinded_user
            %th.d-none.d-sm-table-cell
              AEs
              %span.dropleft
                = link_to "#", data: { toggle: "dropdown" } do
                  = icon("fas", "filter")
                .dropdown-menu
                  = link_to "All", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: @tokens.reject { |t| t.key == "adverse-events" }.collect(&:to_s).join(" "))), style: @tokens.select { |t| t.key == "adverse-events" }.blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                  = link_to "Open", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == "adverse-events" }.collect(&:to_s) + ["adverse-events:open"]).join(" "))), style: @tokens.select { |t| t.key == "adverse-events" && t.value == "open" }.present? ? "font-weight:bold;" : "", class: "dropdown-item"
                  = link_to "Closed", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == "adverse-events" }.collect(&:to_s) + ["adverse-events:closed"]).join(" "))), style: @tokens.select { |t| t.key == "adverse-events" && t.value == "closed" }.present? ? "font-weight:bold;" : "", class: "dropdown-item"
                  = link_to "None", project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == "adverse-events" }.collect(&:to_s) + ["no:adverse-events"]).join(" "))), style: @tokens.select { |t| t.key == "adverse-events" && %w(missing !=).include?(t.operator) }.present? ? "font-weight:bold;" : "", class: "dropdown-item"

      - @subjects.each do |subject|
        %tr{ id: "subject_#{subject.id}" }
          %td= link_to subject.subject_code, [@project, subject]
          - if viewable_sites.count > 1
            %td.d-none.d-md-table-cell= subject.site.number_and_short_name
          %td
            - sheet = subject.last_created_or_edited_sheet(current_user)
            - subject_event = subject.blinded_subject_events(current_user).order(updated_at: :desc).first
            - if sheet && subject_event
              - if (sheet.last_edited_at && sheet.last_edited_at > subject_event.updated_at) || (sheet.last_edited_at.nil? && sheet.created_at > subject_event.updated_at)
                = link_to sheet.name, [@project, sheet]
              - else
                = link_to event_project_subject_path(@project, subject, event_id: subject_event.event, subject_event_id: subject_event.id, event_date: subject_event.event_date_to_param) do
                  = subject_event.name
            - elsif sheet
              = link_to sheet.name, [@project, sheet]
            - elsif subject_event
              = link_to event_project_subject_path(@project, subject, event_id: subject_event.event, subject_event_id: subject_event.id, event_date: subject_event.event_date_to_param) do
                = subject_event.name
            - else
              %span.text-muted Subject created
          - if @project.randomizations_enabled? && unblinded_user
            %td.d-none.d-sm-table-cell.text-center
              - if subject.randomizations_count.positive?
                = simple_check true
              - else
                %span.text-muted -
          - if @project.adverse_events_enabled? && unblinded_user
            %td.d-none.d-sm-table-cell.nowrap
              - open_ae_count = subject.adverse_events.where(closed: false).count
              - closed_ae_count = subject.adverse_events.where(closed: true).count
              - if open_ae_count + closed_ae_count > 0
                - if open_ae_count > 0
                  = link_to adverse_events_project_subject_path(@project, subject), class: "btn btn-success btn-sm" do
                    = open_ae_count
                    Open
                  &nbsp;
                - if closed_ae_count > 0
                  = link_to adverse_events_project_subject_path(@project, subject), class: "btn btn-danger btn-sm" do
                    = closed_ae_count
                    Closed
              - else
                %span.text-muted -
  .center-horizontally= paginate @subjects, theme: "bootstrap"
- else
  .jumbotron.jumbotron-custom-text
    No subjects found.
    - if params[:search].present?
      - if (params[:site_id].present? || @tokens.select { |t| t.key == "adverse-events" }.present? || @tokens.select { |t| t.key == "randomized" }.present?)
        - search = @tokens.select { |t| t.key == "search" }.collect(&:to_s).join(" ")
        = succeed "." do
          = link_to "Clear filters", project_subjects_path(@project, search: search.present? ? search : nil)
      - elsif params[:search].to_s.squish.tr(":", "").size == params[:search].to_s.size && @project.site_or_project_editor?(current_user)
        = succeed "." do
          = link_to "Create subject #{params[:search]}", choose_site_project_subjects_path(subject_code: params[:search])

