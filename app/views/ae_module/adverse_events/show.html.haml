- @title = @adverse_event.name

- content_for :sidebar, render("subjects/sidebar") if @project_member

- content_for :header do
  .float-right
    = link_to dossier_ae_module_adverse_event_path(@project, @adverse_event, format: "pdf"), class: "btn btn-accent btn-shadow" do
      = icon("fas", "file-pdf")
      .d-none.d-md-inline Download dossier
  = @title
  %small= link_to_if (@adverse_event.open? && !@adverse_event.sent_for_review?), @adverse_event.description, edit_ae_module_adverse_event_path(@project, @adverse_event), style: "color: inherit;"
= render "ae_module/adverse_events/tabs", project: @project, adverse_event: @adverse_event
- content_for :breadcrumbs do
  .float-right= render "ae_module/adverse_events/roles", roles: @roles
  %ol
    %li= link_to "adverse events", ae_module_adverse_events_path(@project)
    %li= link_to @subject.subject_code.downcase, [@project, @subject]
    %li.breadcrumb-muted= @adverse_event.name.downcase

.aer-container
  .aer-body
    - designments = @project.ae_designments.where(role: "reporter").order(Arel.sql("position nulls last"))
    - if designments.present?
      %p
        %strong Forms
      - designments.each do |designment|
        - sheets = @adverse_event.sheets.where(design: designment.design)
        - if sheets.present?
          - sheets.each do |sheet|
            .mb-3
              = render "sheets/coverage", sheet: sheet
              = link_to sheet.name, ae_module_sheet_path(@project, @adverse_event, sheet)
        - else
          .mb-3
            %span.badge.badge-coverage.coverage-0 0%
            = link_to designment.design.name, ae_module_reporters_form_path(@project, @adverse_event, designment.design)

    - admin_ae_sheets = @adverse_event.ae_sheets.where(role: "admin").includes(:sheet)

    - if designments.blank? && admin_ae_sheets.present?
      %p
        %strong Forms

    - admin_ae_sheets.each do |ae_sheet|
      .mb-3
        = render "sheets/coverage", sheet: ae_sheet.sheet
        = link_to ae_sheet.sheet.name, ae_module_sheet_path(@project, @adverse_event, ae_sheet.sheet)

    %p
      %strong Documents
    %div
      - documents = @adverse_event.ae_documents.order(created_at: :desc).limit(10)
      - if documents.present?
        - if @adverse_event.ae_documents.count > 10
          %p
            Showing most recent
            %strong 10
            documents.

            = link_to ae_module_documents_path(@project, @adverse_event) do
              View all documents
              = icon("fas", "caret-right")
        - documents.each do |document|
          .mb-3
            = render "ae_module/documents/icon", document: document
            - if document.pdf? || document.image?
              = link_to document.filename, ae_module_document_path(@project, @adverse_event, document)
            - else
              = link_to document.filename, download_ae_module_document_path(@project, @adverse_event, document), data: { turbolinks: false }
      - else
        - if @role_admin || @role_reporter
          = link_to ae_module_documents_path(@project, @adverse_event) do
            = icon("fas", "paperclip")
            Attach supporting documents
            = icon("fas", "caret-right")
        - else
          .text-muted.small No documents found.

    - info_ids = []
    - info_ids += @adverse_event.ae_info_requests.pluck(:id) if @role_admin
    - info_ids += @adverse_event.ae_info_requests.where(ae_team_id: nil).pluck(:id) if @role_reporter
    - @adverse_event.ae_teams.each do |team|
      - role_team_member = @roles.count { |role, t| t == team }.positive?
      - if role_team_member
        - info_ids += @adverse_event.ae_info_requests.where(ae_team: team).pluck(:id)

    - info_requests = @adverse_event.ae_info_requests.where(id: info_ids)

    - if info_requests.present?
      .my-3
        %strong Information requests
      - info_requests.order("resolved_at desc NULLS FIRST, created_at").each do |info_request|
        = render "ae_module/info_requests/show", project: @project, adverse_event: @adverse_event, info_request: info_request

    = render "ae_module/adverse_events/assignments", adverse_event: @adverse_event

  .aer-footer
    - if @adverse_event.closed?
      %div
        %span.text-primary= icon("fas", "lock")
        Adverse event closed.
        - if @role_admin
          = link_to "Reopen?", ae_module_admins_reopen_adverse_event_path(@project, @adverse_event), method: :post, data: { confirm: "Reopen adverse event?" }
          = link_to "Delete?", ae_module_admins_adverse_event_path(@project, @adverse_event), method: :delete, class: "text-danger", data: { confirm: "Permanently DELETE adverse event?" }
    - else
      - if @adverse_event.sent_for_review?
        - if @role_admin
          .mb-3
            %span.text-primary= icon("fas", "check-square")
            Ready for review!
        - elsif @role_reporter
          %div
            %span.text-primary= icon("fas", "check-square")
            Sent for review.
      - else
        - if @role_reporter
          - design = @adverse_event.next_design_to_complete("reporter")
          - if design
            .mb-3
              %span.text-primary= icon("far", "copy")
              = link_to ae_module_reporters_form_path(@project, @adverse_event, design) do
                - if @project.ae_designs("reporter").count == 1
                  Enter
                  = design.name
                - else
                  Enter forms
                = icon("fas", "caret-right")
              .small Provide information about the adverse event.

      - unless @adverse_event.sent_for_review?
        - if @role_reporter
          %div{ class: @role_admin ? "mb-3" : nil }
            - if design.present? || @adverse_event.ae_info_requests.where(ae_team_id: nil, resolved_at: nil).present?
              %span.text-muted= icon("fas", "paper-plane")
              = link_to "#", disabled: true, class: "text-muted", data: { object: "suppress-click" } do
                Send for admin review
                = icon("fas", "caret-right")
              .small
                - if design.present? && @adverse_event.ae_info_requests.where(ae_team_id: nil, resolved_at: nil).present?
                  Enter all forms and resolve all information request before sending for review.
                - elsif design.present?
                  Enter all forms before sending for review.
                - else
                  Resolve all information requests before sending for review.
            - else
              %span.text-primary= icon("fas", "paper-plane")
              = link_to ae_module_reporters_send_for_review_path(@project, @adverse_event), method: :post do
                Send for admin review
                = icon("fas", "caret-right")
              .small
                - if @project.ae_designs("reporter").count.positive? && @adverse_event.ae_info_requests.where(ae_team_id: nil).present?
                  All forms entered and info requests resolved.
                - elsif @adverse_event.ae_info_requests.where(ae_team_id: nil).present?
                  All info requests resolved.
                - elsif @project.ae_designs("reporter").count.positive?
                  All forms entered.
                - else
                  Ready to send for review.
        - elsif @role_admin
          .mb-3
            .small.text-muted Reporter still gathering information.

      - @adverse_event.ae_teams.each do |team|
        - role_manager = @roles.count { |role, t| role == "manager" && t == team }.positive?
        - if role_manager
          .mb-3
            %strong
              Team Manager
              = team.short_name

          - adverse_event_team = @adverse_event.ae_adverse_event_teams.find_by(ae_team: team)
          - if adverse_event_team.team_review_completed?
            .mb-3
              %span.text-primary= icon("fas", "check-square")
              Team review complete.
              .small
                Not yet complete?
                = link_to "Reopen for review.", ae_module_managers_team_review_uncompleted_path(@project, team, @adverse_event), method: :post, class: "text-danger", data: { confirm: "Reopen adverse event for team review?" }
          - else
            .mb-3
              %span.text-primary= icon("fas", "question-circle")
              = link_to new_ae_module_info_request_path(@project, @adverse_event, team: team) do
                Request information
                = icon("fas", "caret-right")
              .small Have questions? Get answers!

            .mb-3
              = link_to ae_module_managers_determine_pathway_path(@project, team, @adverse_event), class: @adverse_event.ae_assignments.where(principal: true).present? ? "text-muted" : nil do
                = icon("fas", "users")
                Assign reviewers
                = icon("fas", "caret-right")
              .small Select forms for reviewers to complete.

            - final_review_ready = @adverse_event.ae_assignments.where(principal: true).count.positive? && @adverse_event.ae_assignments.where(principal: true, review_completed_at: nil).count.zero?
            .mb-3
              = link_to ae_module_managers_team_review_completed_path(@project, team, @adverse_event), method: :post, class: final_review_ready ? nil : "text-muted", data: { confirm: "Marking team review as completed will notify the admin to close the adverse event. Do you want to proceed?" } do
                = icon("fas", "check-square")
                Team review completed
                = icon("fas", "caret-right")
              .small Mark the team review as complete.

      - assignment_found = nil
      - @adverse_event.ae_teams.each do |team|
        - @role_reviewer = @roles.count { |role, t| role == "reviewer" && t == team }.positive?
        - assignment = @adverse_event.ae_assignments.find_by(ae_team: team, reviewer: current_user)

        - if assignment
          - if assignment.completed?
            %span.text-primary= icon("fas", "check-square")
            Assignment complete.
          - else
            .mb-3
              %span.text-primary= icon("fas", "question-circle")
              = link_to new_ae_module_info_request_path(@project, @adverse_event, team: team) do
                Request information
                = icon("fas", "caret-right")
              .small Have questions? Get answers!

            - design = assignment.first_design
            - if design
              %div
                = link_to ae_module_reviewers_review_path(@project, assignment, design) do
                  Start assignment
                  = icon("fas", "caret-right")
                .small
                  %strong= assignment.ae_team_pathway.name
                  Complete assigned sheets.
          - assignment_found = true
        - elsif @role_reviewer
          - assignment_found = false unless assignment_found
      - if assignment_found == false
        .text-muted
          = icon("fas", "info-circle")
          No assignment to complete at this time.

      - if @role_admin
        .mb-3
          %strong Administrative

        .mb-3
          %span.text-primary= icon("fas", "question-circle")
          = link_to new_ae_module_info_request_path(@project, @adverse_event) do
            Request information
            = icon("fas", "caret-right")
          .small Have questions? Get answers!

      - if @role_admin
        .mb-3
          %span{ class: @adverse_event.sent_for_review? ? "text-primary" : "text-muted" }= icon("fas", "paper-plane")
          = link_to "#", data: { toggle: "dropdown" }, class: @adverse_event.sent_for_review? ? nil : "text-muted" do
            Send to team
            = icon("fas", "caret-right")
          .dropdown-menu
            - @project.ae_teams.each do |team|
              = link_to team.name, ae_module_admins_assign_team_path(@project, @adverse_event, team_id: team), method: :post, class: "dropdown-item", data: { confirm: @adverse_event.sent_for_review? ? nil : "Adverse event has not yet been sent for review. Assign team anyways?" }
          .small
            Assign a team to adverse event.
            - if @role_admin && @adverse_event.ae_teams.present?
              %strong
                Assigned to
                = succeed "." do
                  = @adverse_event.ae_teams.pluck(:name).to_sentence

      - if @role_admin
        - design = @project.first_design("admin")
        - if design
          .mb-3
            %span{ class: @adverse_event.sent_for_review? ? "text-primary" : "text-muted" }= icon("far", "copy")
            = link_to ae_module_admins_form_path(@project, @adverse_event, design), class: @adverse_event.sent_for_review? ? nil : "text-muted" do
              Enter administrative forms
              = icon("fas", "caret-right")
            .small Provide information about the adverse event.

      - if @role_admin
        %div
          %span.text-danger= icon("fas", "lock")
          = link_to ae_module_admins_close_adverse_event_path(@project, @adverse_event), method: :post, class: "text-danger" do
            Close adverse event
            = icon("fas", "caret-right")
          .small Mark the adverse event as closed.


- if false
  - @adverse_event.ae_teams.each do |team|
    - role_manager = @roles.count { |role, t| role == "manager" && t == team }.positive?
    - if role_manager || @role_admin
      - team_assignments = team.ae_assignments.order(principal: :desc)
      - if team_assignments.present?
        .dashboard-container
          - team_assignments.group_by(&:reviewer).each do |reviewer, assignments|
            .mb-3
              = reviewer.full_name
              - assignments.each do |assignment|
                %div
                  = icon("fas", "user-md") if assignment.principal?
                  = status_badge(assignment)
                  %strong{ style: "font-size: 0.8;" }= assignment.ae_team_pathway.name
                  - if assignment.sheets.present?
                    %ul
                      - assignment.sheets.each do |sheet|
                        %li
                          = render "sheets/coverage", sheet: sheet
                          = sheet.name
                  - else
                    .text-muted.small No forms completed.
