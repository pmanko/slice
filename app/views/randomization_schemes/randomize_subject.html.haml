- @title = "Randomize Subject"
- @menu_title = "#{@project.name} #{@title}"

- if @subject
  - content_for :sidebar, render("subjects/sidebar")
- else
  - content_for :sidebar, render("projects/sidebar")

- content_for :header, @title
- content_for :breadcrumbs do
  - if @subject
    %ol
      %li= link_to "subjects", project_subjects_path(@project)
      %li= link_to @subject.subject_code, [@project, @subject]
      %li.breadcrumb-muted randomize
  - else
    %ol
      %li= link_to "randomizations", project_randomizations_path(@project)
      %li.breadcrumb-muted new

.dashboard-container.pb-1
  - if @randomization_scheme.lists.count == 0
    %p.lead.text-center
      Lists not yet generated.
    .comment-outer{ style: "margin-top: 40px" }
      .comment-left-fixed
        = image_tag "try-slice-logo-no-text.png", size: "48x48", alt: ""
      .comment-right-fluid
        .comment-comment
          .comment-comment-header
            %strong Slice
            says...
          .comment-comment-body
            %p
              Lists need to be generated before randomization can start for this randomization scheme.
            - if @project.editable_by?(current_user)
              Go
              = link_to "generate lists", [@project, @randomization_scheme]
              now.
            - else
              %p Please contact one of the following project editors to generate the lists:
              %ul
                - @project.editors.each do |editor|
                  %li= editor.name
  - else
    = form_with url: randomize_subject_to_list_project_randomization_scheme_path(@project, @randomization_scheme), method: :post, local: true do |form|
      .form-group.row
        = label_tag :subject_code, "Subject Code", class: "col-md-2 col-form-label"
        .col-md-10
          - if @subject
            .form-control-plaintext
              = hidden_field_tag :from_subject, "1"
              = hidden_field_tag :subject_code, @subject.subject_code
              = link_to @subject.subject_code, [@project, @subject]
          - else
            - sfo = @randomization_scheme.stratification_factors.where(stratifies_by_site: true).first
            = text_field_tag :subject_code, params[:subject_code], autocomplete: "off", class: "form-control", data: { object: "randomization_subject_search", typeahead_url: subject_search_project_randomization_scheme_path(@project, @randomization_scheme), sfo_id: (sfo ? sfo.id : nil) }
          = render "layouts/errors", object: @randomization, key: :subject_code
          = render "layouts/errors", object: @randomization, key: :subject_id

      - @randomization_scheme.stratification_factors.order(:name).each do |stratification_factor|
        .form-group.row
          %label.col-md-2.col-form-label
            = stratification_factor.name
          .col-md-10
            - if stratification_factor.option_hashes.size >= 10
              - site_ids = stratification_factor.option_hashes.collect { |h| h[:site_id] }.compact
              - option_ids = stratification_factor.option_hashes.collect { |h| h[:stratification_factor_option_id] }.compact

              - if site_ids.present?
                - sites = current_user.all_editable_sites.where(project: @project, id: site_ids)
                - selected_site = params.dig(:stratification_factors, "#{stratification_factor.id}")
                = select_tag "stratification_factors[#{stratification_factor.id}]", options_for_select(sites.order_number_and_name_for_select, selected_site), include_blank: "Select site...", class: "custom-select#{" is-invalid" if @randomization.errors.key?(:stratification_factors)}"
              - else
                - stratification_factor.option_hashes.each do |option_hash|
                  - option = @randomization_scheme.stratification_factor_options.find_by(id: option_hash[:stratification_factor_option_id])
                  -# Needed for looking up and setting correct value in dropdown from randomizations.coffee
                  %div{ data: { object: "option-value-lookup", factor_id: stratification_factor.id, option_id: option.id, option_value: option.value } }

                - options = @randomization_scheme.stratification_factor_options.where(id: option_ids)
                - selected_option = params.dig(:stratification_factors, "#{stratification_factor.id}")
                = select_tag "stratification_factors[#{stratification_factor.id}]", options_for_select(options.order(:label).pluck(:label, :id), selected_option), include_blank: "Select option...", class: "custom-select#{" is-invalid" if @randomization.errors.key?(:stratification_factors)}"
            - else
              - stratification_factor.option_hashes.each do |option_hash|
                - site = current_user.all_editable_sites.where(project_id: @project.id).find_by(id: option_hash[:site_id])
                - option = @randomization_scheme.stratification_factor_options.find_by(id: option_hash[:stratification_factor_option_id])
                - if site
                  - selected = (params[:stratification_factors] ? params[:stratification_factors]["#{stratification_factor.id}"].to_s == site.id.to_s : false)
                  .custom-control.custom-radio
                    = radio_button_tag "stratification_factors[#{stratification_factor.id}]", site.id, selected, class: "custom-control-input", id: "stratification_factors_#{stratification_factor.id}_#{site.id}"
                    = label_tag "stratification_factors_#{stratification_factor.id}_#{site.id}", site.number_and_name, class: "custom-control-label"
                - elsif option
                  - selected = (params[:stratification_factors] ? params[:stratification_factors]["#{stratification_factor.id}"].to_s == option.id.to_s : false)
                  .custom-control.custom-radio
                    = radio_button_tag "stratification_factors[#{stratification_factor.id}]", option.id, selected, class: "custom-control-input", id: "stratification_factors_#{stratification_factor.id}_#{option.id}", data: { stratification_factor_id: stratification_factor.id, value: option.value }
                    = label_tag "stratification_factors_#{stratification_factor.id}_#{option.id}", option.label, class: "custom-control-label"
            = render "layouts/errors", object: @randomization, key: stratification_factor.name.to_sym, key_name: stratification_factor.name

      .form-group.row.bg-light.py-3.rounded
        = label_tag :attested, "#{icon("fas", "leaf", style: "color: #5cb85c;")} Attestation".html_safe, class: "col-md-2 col-form-label"
        .col-md-10
          .custom-control.custom-checkbox
            - text = (@randomization_scheme.randomization_requirements.blank? ? "By checking this box I attest that I have personally entered all of the available data recorded and reviewed for completeness and accuracy. All information entered by me is correct to the best of my knowledge." : simple_markdown_old(@randomization_scheme.randomization_requirements))
            = check_box_tag :attested, "1", params[:attested] == "1", class: "custom-control-input", id: "attested"
            = label_tag "attested", text, class: "custom-control-label"
            = render "layouts/errors", object: @randomization, key: :attested

      .form-group.row
        .col-md-2
        .col-md-10
          = submit_tag "Randomize!", class: "btn btn-lg btn-primary btn-shadow"
