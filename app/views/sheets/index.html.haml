- @title = "Sheets"
- @menu_title = "#{@project.name} #{@title}"

- content_for :sidebar, render("projects/sidebar")
- content_for :header, @title
- content_for :breadcrumbs do
  = render "layouts/per_page_breadcrumbs", per_page: 40, object_count: @sheets.total_count
  %ol
    %li.breadcrumb-muted sheets
    %li= link_to icon("fas", "search"), "#", data: { object: "toggle-search-container", target: "#search" }

.search-container-relative
  .search-container{ class: params[:search].present? ? "search-container-visible" : nil }
    - url = project_sheets_path(@project)
    = form_with url: url, method: :get, local: true, id: "search-form" do |form|
      = form.hidden_field :order, value: params[:order] if params[:order].present?
      = form.hidden_field :site_id, value: params[:site_id] if params[:site_id].present?
      = form.hidden_field :user_id, value: params[:user_id] if params[:user_id].present?
      .input-group
        = form.text_field :search, value: params[:search], autocomplete: "off", autocorrect: "off", autocapitalize: "none", spellcheck: "false", data: { object: "sheet-filters-textcomplete", project_id: @project.to_param }, class: "form-control", placeholder: "Search #{@title}", id: "search"
        .input-group-append
          = link_to "#", class: "btn btn-primary", data: { object: "submit-and-disable", target: "#search-form" } do
            = icon("fas", "search")
          = link_to "#", class: "btn btn-light d-none d-sm-inline", data: { object: "sheet-export-link", project_id: @project.to_param } do
            Export
          - if params[:search].present?
            = link_to url, class: "btn btn-light" do
              &times;
          - else
            = link_to "#", data: { object: "toggle-search-container", target: "#search" }, class: "btn btn-light" do
              &times;

- creation_ordered = ["created", "created desc"].include?(params[:order])

- if @sheets.present?
  - viewable_sites = current_user.all_viewable_sites.where(project_id: @project.id).order_number_and_name.to_a
  - viewable_designs = current_user.all_viewable_designs.where(project_id: @project.id).order(:name).to_a
  - all_creators = User.where(id: @project.sheets.select(:user_id))
  - site_or_project_editor = @project.site_or_project_editor?(current_user)
  .dashboard-container.dashboard-table
    %table.table.table-striped.table-borderless.table-hover.table-sticky
      %col.d-none.d-sm-table-column{ width: "1px" }
      %col
      %col
      %col.d-none.d-md-table-column
      - if viewable_sites.count > 1
        %col.d-none.d-sm-table-column
      %col.d-none.d-md-table-column
      - if site_or_project_editor
        %col{ width: "1px" }
      %thead
        %tr
          - filtered_params = params.permit(:site_id, :user_id, :search)
          = th_sort_field_rev @order, "percent", "Coverage", extra_class: "d-none d-sm-table-cell", permit: [:site_id, :user_id]
          %th.nowrap{ class: ["design", "design desc"].include?(params[:order]) ? "sort-selected" : nil }
            = link_to "Sheet", project_sheets_path(@project, filtered_params.merge(order: (params[:order] == "design desc" ? "design" : "design desc")))
            - token = @tokens.find { |t| t.key == "designs" }
            - design_params = token ? token.values : []
            %span.dropright
              = link_to "#", data: { toggle: "dropdown" } do
                - if design_params.present?
                  = icon("fas", "filter", class: "text-primary")
                - else
                  = icon("fas", "filter")
              .dropdown-menu
                - design_search = @tokens.reject { |t| t.key == "designs" }.collect(&:to_s).join(" ")
                = link_to "All Designs", project_sheets_path(@project, filtered_params.merge(order: params[:order], search: design_search)), style: design_params.blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                - viewable_designs.each do |design|
                  - design_search = (@tokens.reject { |t| t.key == "designs" }.collect(&:to_s) + ["designs:#{design.to_param}"]).join(" ")
                  = link_to design.name, project_sheets_path(@project, filtered_params.merge(order: params[:order], search: design_search)), style: design_params.include?(design.to_param) ? "font-weight:bold;" : "", class: "dropdown-item"
          = th_sort_field @order, "subject", "Subject", permit: [:site_id, :user_id]
          %th.d-none.d-md-table-cell.nowrap
            - if creation_ordered
              = link_to "Created", project_sheets_path(@project, filtered_params.merge(order: (params[:order] == "created desc" ? "created" : "created desc")))
            - else
              = link_to "Last Edited", project_sheets_path(@project, filtered_params.merge(order: (params[:order] == "edited" ? "edited desc" : "edited")))
            %span.dropleft
              = link_to "#", data: { toggle: "dropdown" } do
                = icon("fas", "filter")
              .dropdown-menu
                = link_to "Last Edited", project_sheets_path(@project, filtered_params.merge(order: "edited desc")), style: !creation_ordered ? "font-weight:bold;" : "", class: "dropdown-item"
                = link_to "Created", project_sheets_path(@project, filtered_params.merge(order: "created desc")), style: creation_ordered ? "font-weight:bold;" : "", class: "dropdown-item"
          - if viewable_sites.count > 1
            %th.d-none.d-sm-table-cell.nowrap{ class: ["site", "site desc"].include?(params[:order]) ? "sort-selected" : nil }
              = link_to "Site", project_sheets_path(@project, filtered_params.merge(order: (params[:order] == "site desc" ? "site" : "site desc")))
              %span.dropleft
                = link_to "#", data: { toggle: "dropdown" } do
                  - if params[:site_id].present?
                    = icon("fas", "filter", class: "text-primary")
                  - else
                    = icon("fas", "filter")
                .dropdown-menu
                  = link_to "All Sites", project_sheets_path(@project, filtered_params.merge(order: params[:order], site_id: nil)), style: params[:site_id].blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                  - viewable_sites.each do |site|
                    = link_to site.number_and_short_name, project_sheets_path(@project, filtered_params.merge(order: params[:order], site_id: site.id)), style: params[:site_id].to_s == site.id.to_s ? "font-weight:bold;" : "", class: "dropdown-item"
          %th.d-none.d-md-table-cell.nowrap{ class: ["created_by", "created_by desc"].include?(params[:order]) ? "sort-selected" : nil }
            = link_to "Creator", project_sheets_path(@project, filtered_params.merge(order: (params[:order] == "created_by desc" ? "created_by" : "created_by desc")))
            %span.dropleft
              = link_to "#", data: { toggle: "dropdown" } do
                - if params[:user_id].present?
                  = icon("fas", "filter", class: "text-primary")
                - else
                  = icon("fas", "filter")
              .dropdown-menu
                = link_to "All Users", project_sheets_path(@project, filtered_params.merge(order: params[:order], user_id: nil)), style: params[:user_id].blank? ? "font-weight:bold;" : "", class: "dropdown-item"
                - all_creators.order(:full_name).each do |user|
                  = link_to user.full_name, project_sheets_path(@project, filtered_params.merge(order: params[:order], user_id: user.id)), style: params[:user_id].to_s == user.id.to_s ? "font-weight:bold;" : "", class: "dropdown-item"
          - if site_or_project_editor
            %th.text-center Actions
      - @sheets.each do |sheet|
        %tr{ id: "sheet_#{sheet.id}" }
          = render "sheets/sheet_row", sheet: sheet, viewable_sites: viewable_sites, creation_ordered: creation_ordered, site_or_project_editor: site_or_project_editor
  .center-horizontally
    = paginate @sheets, theme: "bootstrap"

  .center-horizontally
    .docs-learn-more
      Learn about
      = succeed "." do
        = link_to "search filters", docs_filters_path
- else
  = render "sheets/none"

